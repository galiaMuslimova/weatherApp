{"version":3,"sources":["img/cloud.png","img/sun.png","img/rain.png","img/snow.png","img/clouds-sun.png","Search.js","WeatherImage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","props","useState","searchValue","setSearchValue","className","value","type","onChange","e","target","onClick","preventDefault","search","WeatherImage","neighbourCity","rain","src","alt","snow","clouds","all","cloud","clouds_sun","sun","initialState","city","coordinates","errorMessage","weatherList","loading","reducer","state","action","currentCity","App","useReducer","dispatch","getCoordinates","fetch","then","response","json","result","getResponse","list","coord","catch","err","console","log","coords","lat","lon","splice","useEffect","Math","round","main","temp","wind","speed","name","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cc89a6cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.98491cb4.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.c7171d58.png\";","module.exports = __webpack_public_path__ + \"static/media/rain.20617485.png\";","module.exports = __webpack_public_path__ + \"static/media/snow.3260a1dc.png\";","module.exports = __webpack_public_path__ + \"static/media/clouds-sun.66d07c0d.png\";","import React, { useState } from \"react\";\r\n\r\nconst Search = (props) => {\r\n  const [searchValue, setSearchValue] = useState('');\r\n\r\n  function inputChange(e) {\r\n    setSearchValue(e.target.value)\r\n  }\r\n\r\n  function inputSubmit(e){\r\n    e.preventDefault();\r\n    props.search(searchValue);\r\n    inputReset();\r\n  }\r\n\r\n  function inputReset(){\r\n    setSearchValue(\"\")\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"search\">\r\n        <input value={searchValue} type='text' onChange={inputChange} className='form-control'></input>\r\n        <input type='submit' onClick={inputSubmit} value=\"Search\" className='btn btn-info'></input>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport cloud from './img/cloud.png';\r\nimport sun from './img/sun.png';\r\nimport rain from './img/rain.png';\r\nimport snow from './img/snow.png';\r\nimport clouds_sun from './img/clouds-sun.png';\r\n\r\nconst WeatherImage = ({ neighbourCity }) => {\r\n    return (\r\n        <div>\r\n            {(neighbourCity.rain) ?\r\n                (<img className='card-img-bottom' src={rain} alt='rain' />) :\r\n                ((neighbourCity.snow) ?\r\n                    (<img className='card-img-bottom' src={snow} alt='snow' />) :\r\n                    ((neighbourCity.clouds.all >= 70) ?\r\n                        (<img className='card-img-bottom' src={cloud} alt='cloud' />) :\r\n                        ((neighbourCity.clouds.all >= 30) ?\r\n                            (<img className='card-img-bottom' src={clouds_sun} alt='clouds_sun' />) :\r\n                            (<img className='card-img-bottom' src={sun} alt='sun' />))))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherImage;\r\n","import React, { useReducer, useEffect } from \"react\";\nimport Search from \"./Search\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport WeatherImage from \"./WeatherImage\";\n\nconst initialState = {\n    city: \"London\",\n    coordinates: {},\n    errorMessage: null,\n    weatherList: [],\n    loading: true\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"search_success\":\n            return {\n                ...state,\n                loading: false,\n                currentCity: action.currentCity,\n                weatherList: action.weatherList\n            };\n        default:\n            return {\n                ...state,\n            };\n    }\n};\n\nconst App = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const getCoordinates = (city) => {\n        fetch(`https://api.openweathermap.org/data/2.5/find?q=${city}&APPID=d4853c8a009254f5de62e57935ce77db`)\n            .then(response => response.json())\n            .then(result => {\n                getResponse(result.list[0].coord)\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    const getResponse = (coords) => {\n        fetch(`https://api.openweathermap.org/data/2.5/find?lat=${coords.lat}&lon=${coords.lon}&cnt=6&units=metric&APPID=d4853c8a009254f5de62e57935ce77db`)\n            .then(response => response.json())\n            .then(result => {\n                dispatch({\n                    type: \"search_success\",\n                    currentCity: result.list[0],\n                    weatherList: result.list.splice(1)\n                });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    //show weather for london when page is load\n    useEffect(() => {\n        getCoordinates(\"London\");\n    }, []);\n\n    //take search value and send it to response\n    const search = searchValue => {\n        getCoordinates(searchValue);\n    };\n\n    const { loading, weatherList, currentCity } = state;\n\n    return (\n        <div className='container p-3 my-3 bg-primary text-white rounded'>\n            {loading ? (<span>loading... </span>) : (\n                <div className='container'>\n                    <div className='row container '>\n                        <div className='col '>\n                            <div className='row display-2 d-flex justify-content-center'>{Math.round(state.currentCity.main.temp)}℃</div>\n                            <div className='row'>\n                                <div className='col d-flex justify-content-end'><h3>{state.currentCity.wind.speed} m/s</h3></div>\n                                <div className='col'><WeatherImage neighbourCity={currentCity} /></div>\n                            </div>\n                        </div>\n                        <div className='col '>\n                            <div className='row display-3 d-flex justify-content-center'>{state.currentCity.name}</div>\n                            <div className='row d-flex justify-content-center'><Search search={search} /></div>\n                        </div>\n                    </div>\n                    <div className='card-group'>\n                        {weatherList.map((neighbourCity, index) => (\n                            <div className=\"card bg-info\">\n                                <div className='card-header'>{neighbourCity.name}</div>\n                                <div className='card-body'>\n                                    {Math.round(neighbourCity.main.temp)}℃ {neighbourCity.wind.speed}m/s\n                                </div>\n                                <WeatherImage key={index} neighbourCity={neighbourCity} />\n                            </div>))}\n                    </div>\n                </div>)}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}